What are tokens:
They are used to protect routes in an API, so
you have to be authenticated to access them.
Authentication will fetch you a token, and you can make
requests with that token to protected routes.

Authenticate 
-> Get token back and store it into local storage or cookies 
-> Make requests with this token to access protected routes.

1. Install jsonwebtoken:
npm i --s jsonwebtoken

2. Create token variable, and then configure token with jwt.sign().
Pass in three fields:
a) Information to store. Example: user id, user email,
b) secret string which is used to access the token,
c) other setting, such as the time it expires in.

Example Code:

let token;
    token = jwt.sign({userId: createdUser.id, email: createdUser.email }, 
        'supersecret_dont_share', 
        {expiresIn: '1h'}
        );

3. In res.json return the token and other user data. Example Code:

res.status(201).json({ userId: createdUser.id, email: createdUser.email, token: token });

4. Copy the code in step 2 into the login controller
except changing createdUser to existingUser,
and Signing up to Logging in. Example Code:

let token;

    try {
    token = jwt.sign({userId: existingUser.id, email: existingUser.email }, 
        'supersecret_dont_share', 
        {expiresIn: '1h'}
        );
    } catch (err) {
        const error = new HttpError(
            'Logging in failed, please try again.',
            500
        );
        return next(error);
    }

    res.json({
    userId: existingUser.id,
    email: existingUser.email,
    token: token
});