1. Set token expiration date:

const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);

2. Pass expirationDate in as parameter of login.

  const login = useCallback((userId, user, token, expirationDate) => {
    setToken(token);
    setUser(user);
    const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);
    localStorage.setItem('userData', JSON.stringify({ 
      userId: userId, 
      token: token, 
      user: user, 
      expiration: tokenExpirationDate.toISOString()
     }));
  }, []);

3. Check that expiration date is greater than current time in the auto login function:

useEffect(() => {
    const storedData = JSON.parse(localStorage.getItem('userData'));
    if (
      storedData && 
      storedData.token &&
      new Date(storedData.expiration) > new Date()
      ) {
      login(storedData.userId, storedData.user, storedData.token);
    }
  }, [login]);

4. Make sure the token expiration date gets updated
on each refresh. Here's the code:

let logoutTimer;

const App = () => {
  const [token, setToken] = useState(false);
  const [tokenExpirationDate, setTokenExpirationDate] = useState();
  const [user, setUser] = useState(false);

  const login = useCallback((userId, user, token, expirationDate) => {
    setToken(token);
    setUser(user);
    const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);
    setTokenExpirationDate(tokenExpirationDate);
    localStorage.setItem('userData', JSON.stringify({ 
      userId: userId, 
      token: token, 
      user: user, 
      expiration: tokenExpirationDate.toISOString()
     }));
  }, []);

  const logout = useCallback(() => {
    setToken(null);
    setTokenExpirationDate(null);
    setUser(null);
    localStorage.removeItem('userData');
  }, []);

  useEffect(() => {
    if(token && tokenExpirationDate) {
      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();
      logoutTimer = setTimeout(logout, remainingTime)
    } else {
      clearTimeout(logoutTimer);
    }
  }, [token, logout, tokenExpirationDate])

  useEffect(() => {
    const storedData = JSON.parse(localStorage.getItem('userData'));
    if (
      storedData && 
      storedData.token &&
      new Date(storedData.expiration) > new Date()
      ) {
      login(storedData.userId, storedData.user, storedData.token);
    }
  }, [login]);