1. Install Multer:
Input into terminal:
npm i --s Multer

2. Create file upload middleware.
Packages needed:
Multer and uuid.

Code:

// Required packages

const multer = require("multer");
const uuid = require("uuid/v4");

// Mime type map
const MIME_TYPE_MAP = {
    'image/png': 'png',
    'image/jpeg': 'jpeg',
    'image/jpg': 'jpg'
};

// multer configuration
const fileUpload = multer({
    limits: 500000,
    storage: multer.diskStorage({
        destination: (req, file, cb) => {
            cb(null, 'uploads/images')
        },
        filename: (req, file, cb) => {
            const ext = MIME_TYPE_MAP[file.mimetype];
            cb(null, uuid() + '.' + ext);
        }
    }),
    fileFilter: (req, file, cb) => {
        const isValid = !!MIME_TYPE_MAP[file.mimetype];
        let error = isValid ? null : new Error("Invalid mime type!");
        cb(error, isValid);
    }
});

// Export middleware

module.exports = fileUpload;

3. Import middleware in routes. 
   Then extract an image from the request using .single.
   Example code:
   router.post('/',
    fileUpload.single('picture'),
    [
        check('caption')
            .trim()
            .not()
            .isEmpty()
    ],
    postsController.createPost);

4. In controllers, extract the path from the request and replaces the backslashes with forward slashes using this code:

    req.file.path.replace(/\\/g, "/")
 
Upload this path as the picture field when creating a new item such as a post. Example code:

const createdPost = new Post({
        caption,
        picture: req.file.path.replace(/\\/g, "/"),
        uploadTime,
        author,
        profilePic,
        authorName
    });

5. Access this image by making requests to this API from the frontend, and accessing uploads and images, and then accessing the path
which can be found in the picture prop of the item you're accessing. Example Code:
<img src={`http://localhost:5000/${props.post.picture}`} className="post-picture" alt="Post"></img>

6. You can upload images to the backend, but you have to use form data instead of JSON data as forms are binary data.
For the picture pass in the file, not the path. This can be accessed through event.target.files[0]. Example Code:

const pickedHandler = event => {
        let pickedFile;
        if(event.target.files && event.target.files.length === 1) {
            pickedFile = event.target.files[0];
            setFile(pickedFile);
            setPicture(pickedFile);
            setIsValid(true);
        } else {
            setIsValid(false);
        }
    };

7. Then you can finally make the request with this code:

event.preventDefault();
        try {
            const formData = new FormData();
            formData.append('caption', captionRef.current.textContent.toString());
            formData.append('picture', picture);
            await sendRequest(
                `http://localhost:5000/api/posts/${props.post.id}`,
                'PATCH',
                formData
                );
                history.push('/');
        }
     catch (err) {
         console.log(err);
     }

Use the custom http hook you have and pass in the url, method and form data. Prevent the default method and create form data
by creating a constant with new FormData().